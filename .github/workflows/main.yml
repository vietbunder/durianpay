name: Deploy to AWS EC2

on:
  push:
    branches:
      - main  # Trigger deployment on push to the main branch

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v1
      with:
        registry-type: public

    - name: Build Docker image
      run: |
        docker build -t nginx-image .

    - name: Tag Docker image
      env:
        ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
        ECR_REPOSITORY: nginx-repo
      run: |
        docker tag nginx-image:latest $ECR_REGISTRY/$ECR_REPOSITORY:latest

    - name: Push Docker image to ECR
      env:
        ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
        ECR_REPOSITORY: nginx-repo
      run: |
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

    - name: SSH into EC2 and deploy Docker container
      uses: appleboy/ssh-action@v0.1.10
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        envs: |
          ECR_REGISTRY=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
          ECR_REPOSITORY=nginx-repo
      run: |
        # Stop and remove any existing container
        docker stop nginx-container || true
        docker rm nginx-container || true

        # Pull the latest Docker image from ECR
        docker pull $ECR_REGISTRY/$ECR_REPOSITORY:latest

        # Run the Docker container
        docker run -d --name nginx-container -p 80:80 $ECR_REGISTRY/$ECR_REPOSITORY:latest
